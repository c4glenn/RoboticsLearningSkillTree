services:
  web:
    build: ./backend
    command: ./wait-for-it.sh db 5432 -- gunicorn backend.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    restart: unless-stopped

  frontend:
    build: ./frontend
    command: npm run build
    volumes:
      - frontend_dist:/app/dist
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - frontend_dist:/usr/share/nginx/html:ro
      - static_volume:/app/static:ro
      - media_volume:/app/media:ro
    depends_on:
      - web
      - frontend
    restart: unless-stopped

  redis:
    image: redis:alpine
    restart: unless-stopped

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 5s
      retries: 10

  celery:
    build: ./backend
    command: celery -A backend worker --loglevel=info
    env_file:
      - .env
    depends_on:
      - redis
      - web
    restart: unless-stopped

  flower:
    image: mher/flower
    ports:
      - "5555:5555"
    command: ["celery", "--broker=redis://redis:6379/0", "flower"]
    depends_on:
      - redis
    restart: unless-stopped

volumes:
  postgres_data:
  frontend_dist:
  static_volume:
  media_volume:
